# アプリケーション設定
# 開発環境: development, テスト環境: test, 本番環境: production
NODE_ENV=development
# ログレベル: debug, info, warn, error
LOG_LEVEL=info

# ポート設定
PORT=3000
PORT_FRONTEND=5173

# URL設定（ローカル開発用）
BACKEND_URL=http://localhost:${PORT}
FRONTEND_URL=http://localhost:${PORT_FRONTEND}
API_BASE_URL=${BACKEND_URL}/api

# URL設定（Docker開発環境用）
# Docker内ではサービス名でアクセスするため、別途設定
DOCKER_BACKEND_URL=http://backend:${PORT}
DOCKER_FRONTEND_URL=http://frontend:${PORT_FRONTEND}
DOCKER_API_BASE_URL=${DOCKER_BACKEND_URL}/api

# SvelteKitアダプター設定
ORIGIN=http://localhost:${PORT_FRONTEND}
PROTOCOL_HEADER=x-forwarded-proto
HOST_HEADER=x-forwarded-host

# データベース設定
# 以下のいずれかを選択して設定
# SQLite（ローカル開発・CI用）
DATABASE_URL=file:/app/database/data/dev.db
# Turso（本番環境用）
# DATABASE_URL=libsql://your-database.turso.io
# DATABASE_AUTH_TOKEN=your-auth-token

# API設定
API_SECRET=development_secret

# フロントエンド設定（Docker環境向け）
VITE_API_BASE_URL=${DOCKER_API_BASE_URL}
VITE_BACKEND_URL=${DOCKER_BACKEND_URL}
VITE_APP_TITLE="Development App"

# Docker設定
# 開発環境でのソースコードマウント
# 環境に応じて以下のいずれかを選択：

# Windows環境推奨設定:
# - ボリュームマウントを無効化し、コンテナ内でのファイルコピーを使用
# - Windows環境ではパフォーマンスの問題を回避するため推奨
DEV_MOUNT=

# Linux/Mac環境推奨設定:
# - ホットリロード用にソースディレクトリをマウント
# DEV_MOUNT=./frontend:/app/frontend:delegated;./backend:/app/backend:delegated;./shared:/app/shared:delegated

# 特定のディレクトリのみマウント（例: フロントエンドのみ）:
# DEV_MOUNT=./frontend:/app/frontend:delegated

# コマンド設定（必要に応じてカスタマイズ）
BACKEND_CMD=bun run dev
FRONTEND_CMD=bun run dev
SETUP_CMD=bun install
LINT_CMD=bun run biome:check
TEST_CMD=bun run test:all
E2E_CMD=cd frontend && bunx playwright test

# E2Eテスト設定
# インストールするブラウザ: chromium, firefox, webkit
PLAYWRIGHT_BROWSERS=chromium
# 0: ブラウザをダウンロード, 1: ダウンロードをスキップ
SKIP_BROWSER_DOWNLOAD=0

# CI環境設定
# CI環境で実行する場合は true に設定
CI=

# 環境変数の設定方法:
# 
# Linux/Mac:
# PORT=4000 API_SECRET=my_secret bun run docker:dev
#
# Windows (PowerShell):
# $env:PORT="4000"; $env:API_SECRET="my_secret"; bun run docker:dev:windows
#
# GitHub Actions:
# env:
#   PORT: 3000
#   API_SECRET: ${{ secrets.API_SECRET }}
