name: Dockerデプロイ

on:
  workflow_run:
    workflows: ["Dockerイメージビルド"]
    branches: [main]
    types:
      - completed
  workflow_dispatch:

env:
  # 基本設定
  NODE_ENV: production
  PORT: 3000
  PORT_FRONTEND: 5173
  LOG_LEVEL: info

  # データベース設定
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DATABASE_AUTH_TOKEN: ${{ secrets.DATABASE_AUTH_TOKEN }}

  # API設定
  API_SECRET: ${{ secrets.API_SECRET }}

  # CORS設定
  CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}

  # Docker設定
  BACKEND_TAG: myapp/backend:latest
  FRONTEND_TAG: myapp/frontend:latest

jobs:
  deploy:
    name: 本番環境へのデプロイ
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: コードのチェックアウト
        uses: actions/checkout@v4

      - name: DockerHubにログイン
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: デプロイ設定ファイルの作成
        run: |
          cat > docker-compose.prod.yml << EOF
          version: '3.8'
          
          services:
            backend:
              image: ${{ env.BACKEND_TAG }}
              restart: always
              ports:
                - "${{ env.PORT }}:${{ env.PORT }}"
              environment:
                - NODE_ENV=${{ env.NODE_ENV }}
                - PORT=${{ env.PORT }}
                - DATABASE_URL=${{ env.DATABASE_URL }}
                - DATABASE_AUTH_TOKEN=${{ env.DATABASE_AUTH_TOKEN }}
                - API_SECRET=${{ env.API_SECRET }}
                - CORS_ALLOWED_ORIGINS=${{ env.CORS_ALLOWED_ORIGINS }}
                - FRONTEND_URL=${{ secrets.FRONTEND_URL || 'https://example.com' }}
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:${{ env.PORT }}/health"]
                interval: 30s
                timeout: 5s
                retries: 3
                start_period: 10s
            
            frontend:
              image: ${{ env.FRONTEND_TAG }}
              restart: always
              ports:
                - "${{ env.PORT_FRONTEND }}:${{ env.PORT_FRONTEND }}"
              environment:
                - NODE_ENV=${{ env.NODE_ENV }}
                - PORT_FRONTEND=${{ env.PORT_FRONTEND }}
                - VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL || 'https://api.example.com/api' }}
                - VITE_BACKEND_URL=${{ secrets.VITE_BACKEND_URL || 'https://api.example.com' }}
                - VITE_APP_TITLE=${{ secrets.VITE_APP_TITLE || 'Production App' }}
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:${{ env.PORT_FRONTEND }}/"]
                interval: 30s
                timeout: 5s
                retries: 3
                start_period: 10s
          EOF

      - name: リモートサーバーへのデプロイ
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            # デプロイディレクトリの作成
            mkdir -p ~/app
            
            # 設定ファイルのコピー
            echo "${{ secrets.ENV_FILE }}" > ~/app/.env
            
            # Docker Composeファイルのコピー
            cat > ~/app/docker-compose.yml << 'EOL'
            version: '3.8'
            
            services:
              backend:
                image: ${{ env.BACKEND_TAG }}
                restart: always
                ports:
                  - "${{ env.PORT }}:${{ env.PORT }}"
                environment:
                  - NODE_ENV=${{ env.NODE_ENV }}
                  - PORT=${{ env.PORT }}
                  - DATABASE_URL=${{ env.DATABASE_URL }}
                  - DATABASE_AUTH_TOKEN=${{ env.DATABASE_AUTH_TOKEN }}
                  - API_SECRET=${{ env.API_SECRET }}
                  - CORS_ALLOWED_ORIGINS=${{ env.CORS_ALLOWED_ORIGINS }}
                  - FRONTEND_URL=${{ secrets.FRONTEND_URL || 'https://example.com' }}
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:${{ env.PORT }}/health"]
                  interval: 30s
                  timeout: 5s
                  retries: 3
                  start_period: 10s
              
              frontend:
                image: ${{ env.FRONTEND_TAG }}
                restart: always
                ports:
                  - "${{ env.PORT_FRONTEND }}:${{ env.PORT_FRONTEND }}"
                environment:
                  - NODE_ENV=${{ env.NODE_ENV }}
                  - PORT_FRONTEND=${{ env.PORT_FRONTEND }}
                  - VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL || 'https://api.example.com/api' }}
                  - VITE_BACKEND_URL=${{ secrets.VITE_BACKEND_URL || 'https://api.example.com' }}
                  - VITE_APP_TITLE=${{ secrets.VITE_APP_TITLE || 'Production App' }}
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:${{ env.PORT_FRONTEND }}/"]
                  interval: 30s
                  timeout: 5s
                  retries: 3
                  start_period: 10s
            EOL
            
            # Dockerイメージのプル
            docker pull ${{ env.BACKEND_TAG }}
            docker pull ${{ env.FRONTEND_TAG }}
            
            # アプリケーションの再起動
            cd ~/app
            docker compose down
            docker compose up -d
            
            # ヘルスチェック
            echo "バックエンドのヘルスチェック..."
            timeout=60
            while [ $timeout -gt 0 ]; do
              if curl -s http://localhost:${{ env.PORT }}/health > /dev/null; then
                echo "バックエンドが正常に起動しました"
                break
              fi
              echo "バックエンド待機中... 残り $timeout 秒"
              sleep 5
              timeout=$((timeout - 5))
            done
            
            if [ $timeout -le 0 ]; then
              echo "バックエンド起動のタイムアウト"
              docker compose logs backend
              exit 1
            fi
            
            echo "フロントエンドのヘルスチェック..."
            timeout=60
            while [ $timeout -gt 0 ]; do
              if curl -s http://localhost:${{ env.PORT_FRONTEND }}/ > /dev/null; then
                echo "フロントエンドが正常に起動しました"
                break
              fi
              echo "フロントエンド待機中... 残り $timeout 秒"
              sleep 5
              timeout=$((timeout - 5))
            done
            
            if [ $timeout -le 0 ]; then
              echo "フロントエンド起動のタイムアウト"
              docker compose logs frontend
              exit 1
            fi
            
            echo "デプロイが完了しました"

      - name: デプロイ結果の通知
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Docker デプロイ
          SLACK_MESSAGE: |
            環境: 本番
            ステータス: ${{ job.status }}
            バックエンドイメージ: ${{ env.BACKEND_TAG }}
            フロントエンドイメージ: ${{ env.FRONTEND_TAG }}
            CORS設定: ${{ env.CORS_ALLOWED_ORIGINS }} 