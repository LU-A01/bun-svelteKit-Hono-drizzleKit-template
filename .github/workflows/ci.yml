name: 統合CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  # 基本設定
  NODE_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
  PORT: 3000
  PORT_FRONTEND: 5173
  LOG_LEVEL: info
  
  # データベース設定
  # 本番ブランチの場合はシークレットを使用、それ以外はSQLiteを使用
  DATABASE_URL: ${{ github.ref == 'refs/heads/main' && secrets.DATABASE_URL || 'file:/app/database/data/dev.db' }}
  DATABASE_AUTH_TOKEN: ${{ secrets.DATABASE_AUTH_TOKEN || '' }}
  
  # API設定
  API_SECRET: ${{ secrets.API_SECRET || 'ci_default_secret' }}
  
  # CI環境用のコマンド
  SETUP_CMD: bun install
  LINT_CMD: bun run biome:check || (echo "::warning::リントエラーが発生しましたが、テストは続行します" && exit 0)
  TEST_CMD: bun run test:all
  E2E_CMD: cd frontend && bunx playwright test
  
  # 環境変数を.envファイルで設定できるようにする
  DEV_MOUNT: "" # CI環境ではボリュームマウントを無効化

jobs:
  lint:
    name: リントとフォーマット
    runs-on: ubuntu-latest
    steps:
      - name: コードのチェックアウト
        uses: actions/checkout@v4

      - name: Dockerコンポーズのセットアップ
        uses: docker/setup-buildx-action@v3

      - name: Dockerビルドキャッシュの設定
        uses: actions/cache@v4
        with:
          path: ~/.docker
          key: ${{ runner.os }}-docker-${{ hashFiles('**/docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Biomeによるコードチェック
        run: docker compose run --rm lint
        continue-on-error: true

  test:
    name: ユニットテスト
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: コードのチェックアウト
        uses: actions/checkout@v4

      - name: Dockerコンポーズのセットアップ
        uses: docker/setup-buildx-action@v3

      - name: Dockerビルドキャッシュの設定
        uses: actions/cache@v4
        with:
          path: ~/.docker
          key: ${{ runner.os }}-docker-${{ hashFiles('**/docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Docker Composeサービス起動
        run: |
          docker compose up -d database
          docker compose up -d backend
          docker compose up -d frontend

      - name: 依存関係のインストール
        run: docker compose run --rm setup bun install

      - name: ユニットテスト実行
        run: docker compose run --rm test
        env:
          NODE_ENV: test
          TEST_TIMEOUT: 20000 # テストタイムアウトを延長

      - name: テスト結果アップロード
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results
          retention-days: 7

  e2e:
    name: E2Eテスト
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: コードのチェックアウト
        uses: actions/checkout@v4

      - name: Dockerコンポーズのセットアップ
        uses: docker/setup-buildx-action@v3

      - name: Dockerビルドキャッシュの設定
        uses: actions/cache@v4
        with:
          path: ~/.docker
          key: ${{ runner.os }}-docker-${{ hashFiles('**/docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Docker Composeサービス起動
        run: |
          docker compose up -d database
          docker compose up -d backend
          docker compose up -d frontend

      - name: 依存関係のインストール
        run: docker compose run --rm setup bun install

      - name: Playwrightのインストール
        run: docker compose run --rm setup bash -c "cd frontend && bunx playwright install --with-deps chromium"
        env:
          PLAYWRIGHT_BROWSERS: chromium
          SKIP_BROWSER_DOWNLOAD: 0

      - name: E2Eテスト実行
        run: docker compose run --rm e2e
        env:
          NODE_ENV: test
          PLAYWRIGHT_BROWSERS: chromium
          SKIP_BROWSER_DOWNLOAD: 1 # ブラウザは既にインストール済み

      - name: E2Eテスト結果アップロード
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: frontend/test-results
          retention-days: 7

  build:
    name: Dockerイメージのビルド
    runs-on: ubuntu-latest
    needs: [test, e2e]
    steps:
      - name: コードのチェックアウト
        uses: actions/checkout@v4

      - name: Dockerコンポーズのセットアップ
        uses: docker/setup-buildx-action@v3

      - name: バックエンドイメージのビルド
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/backend.Dockerfile
          push: false
          tags: myapp/backend:latest
          build-args: |
            NODE_ENV=production
            PORT=${{ env.PORT }}
            API_SECRET=${{ secrets.API_SECRET || env.API_SECRET }}

      - name: フロントエンドイメージのビルド
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/frontend.Dockerfile
          push: false
          tags: myapp/frontend:latest
          build-args: |
            NODE_ENV=production
            PORT_FRONTEND=${{ env.PORT_FRONTEND }}
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL || 'https://api.example.com/api' }}
            VITE_BACKEND_URL=${{ secrets.VITE_BACKEND_URL || 'https://api.example.com' }}
            VITE_APP_TITLE=${{ secrets.VITE_APP_TITLE || 'Production App' }}

  # 本番環境デプロイジョブ（必要に応じてコメント解除）
  # deploy:
  #   name: 本番環境デプロイ
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   if: github.ref == 'refs/heads/main'
  #   environment: production
  #   steps:
  #     - name: コードのチェックアウト
  #       uses: actions/checkout@v4
  #
  #     - name: デプロイスクリプト実行
  #       run: echo "デプロイスクリプトをここに追加"
  #       env:
  #         # 本番環境専用の環境変数
  #         DATABASE_URL: ${{ secrets.DATABASE_URL }}
  #         DATABASE_AUTH_TOKEN: ${{ secrets.DATABASE_AUTH_TOKEN }}
  #         API_SECRET: ${{ secrets.API_SECRET }}
  #         DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
