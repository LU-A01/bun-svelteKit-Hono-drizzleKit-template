services:
  database:
    build:
      context: .
      dockerfile: docker/database.Dockerfile
    restart: "no"
    volumes:
      - db-data:/app/database/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "test", "-f", "/app/database/data/dev.db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    environment:
      # データベースファイルパスをプラットフォーム中立に設定
      - DATABASE_URL=${DATABASE_URL:-file:/app/database/data/dev.db}
      - DATABASE_AUTH_TOKEN=${DATABASE_AUTH_TOKEN:-}

  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-development}
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    depends_on:
      database:
        condition: service_completed_successfully
    environment:
      # ポートとアプリケーション設定
      - PORT=${PORT:-3000}
      - NODE_ENV=${NODE_ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - API_SECRET=${API_SECRET:-development_secret}
      # URL設定（コンテナネットワーク内のフロントエンドURL）
      - FRONTEND_URL=${DOCKER_FRONTEND_URL:-http://frontend:${PORT_FRONTEND:-5173}}
      # データベース設定
      - DATABASE_URL=${DATABASE_URL:-file:/app/database/data/dev.db}
      - DATABASE_AUTH_TOKEN=${DATABASE_AUTH_TOKEN:-}
    volumes:
      - db-data:/app/database/data
      # 開発時のホットリロード用ボリューム (CIでは無視される)
      - ${DEV_MOUNT:-./backend:/app/backend:delegated}
      - ${DEV_MOUNT:-./shared:/app/shared:delegated}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-3000}/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    command: ${BACKEND_CMD:-bun run dev}

  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-development}
    ports:
      - "${PORT_FRONTEND:-5173}:${PORT_FRONTEND:-5173}"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      # ポートとアプリケーション設定
      - PORT_FRONTEND=${PORT_FRONTEND:-5173}
      - NODE_ENV=${NODE_ENV:-development}
      # フロントエンド用API設定（コンテナネットワーク内のバックエンドURL）
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://backend:${PORT:-3000}/api}
      - VITE_BACKEND_URL=${VITE_BACKEND_URL:-http://backend:${PORT:-3000}}
      - VITE_APP_TITLE=${VITE_APP_TITLE:-"Development App"}
      # SvelteKitのアダプター設定
      - ORIGIN=${ORIGIN:-http://frontend:${PORT_FRONTEND:-5173}}
      - PROTOCOL_HEADER=${PROTOCOL_HEADER:-x-forwarded-proto}
      - HOST_HEADER=${HOST_HEADER:-x-forwarded-host}
    volumes:
      # 開発時のホットリロード用ボリューム (CIでは無視される)
      - ${DEV_MOUNT:-./frontend:/app/frontend:delegated}
      - ${DEV_MOUNT:-./shared:/app/shared:delegated}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT_FRONTEND:-5173}/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    command: ${FRONTEND_CMD:-bun run dev}

  # CI環境用・一度限りのセットアップとテスト実行サービス
  setup:
    build:
      context: .
      dockerfile: docker/setup.Dockerfile
    depends_on:
      database:
        condition: service_healthy
    environment:
      # データベース設定
      - DATABASE_URL=${DATABASE_URL:-file:/app/database/data/dev.db}
      - DATABASE_AUTH_TOKEN=${DATABASE_AUTH_TOKEN:-}
      # URL設定（コンテナネットワーク内）
      - BACKEND_URL=${DOCKER_BACKEND_URL:-http://backend:${PORT:-3000}}
      - API_BASE_URL=${DOCKER_API_BASE_URL:-http://backend:${PORT:-3000}/api}
      - FRONTEND_URL=${DOCKER_FRONTEND_URL:-http://frontend:${PORT_FRONTEND:-5173}}
      # ポートとアプリケーション設定
      - PORT=${PORT:-3000}
      - PORT_FRONTEND=${PORT_FRONTEND:-5173}
      - NODE_ENV=${NODE_ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - db-data:/app/database/data
      - ./:/app
      - node_modules:/app/node_modules
      - frontend-node-modules:/app/frontend/node_modules
      - backend-node-modules:/app/backend/node_modules
      - database-node-modules:/app/database/node_modules
      - shared-node-modules:/app/shared/node_modules
    networks:
      - app-network
    profiles:
      - ci
    command: ${SETUP_CMD:-bun install}

  # Biomeによるリントとフォーマットを実行するサービス
  lint:
    build:
      context: .
      dockerfile: docker/setup.Dockerfile
    volumes:
      - ./:/app
      - node_modules:/app/node_modules
      - frontend-node-modules:/app/frontend/node_modules
      - backend-node-modules:/app/backend/node_modules
      - database-node-modules:/app/database/node_modules
      - shared-node-modules:/app/shared/node_modules
    networks:
      - app-network
    profiles:
      - ci
    command: ${LINT_CMD:-bun run biome:check || (echo "::warning::リントエラーが発生しましたが、テストは続行します" && exit 0)}

  # テストを実行するサービス
  test:
    build:
      context: .
      dockerfile: docker/setup.Dockerfile
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    environment:
      # データベース設定
      - DATABASE_URL=${DATABASE_URL:-file:/app/database/data/dev.db}
      - DATABASE_AUTH_TOKEN=${DATABASE_AUTH_TOKEN:-}
      # URL設定（コンテナネットワーク内）
      - BACKEND_URL=${DOCKER_BACKEND_URL:-http://backend:${PORT:-3000}}
      - API_BASE_URL=${DOCKER_API_BASE_URL:-http://backend:${PORT:-3000}/api}
      - FRONTEND_URL=${DOCKER_FRONTEND_URL:-http://frontend:${PORT_FRONTEND:-5173}}
      # テスト設定
      - PORT=${PORT:-3000}
      - PORT_FRONTEND=${PORT_FRONTEND:-5173}
      - NODE_ENV=${NODE_ENV:-test}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - TEST_TIMEOUT=${TEST_TIMEOUT:-10000}
      # SvelteKitのアダプター設定（テスト時）
      - ORIGIN=${ORIGIN:-http://frontend:${PORT_FRONTEND:-5173}}
    volumes:
      - db-data:/app/database/data
      - ./:/app
      - node_modules:/app/node_modules
      - frontend-node-modules:/app/frontend/node_modules
      - backend-node-modules:/app/backend/node_modules
      - database-node-modules:/app/database/node_modules
      - shared-node-modules:/app/shared/node_modules
      - test-results:/app/test-results
    networks:
      - app-network
    profiles:
      - ci
    command: ${TEST_CMD:-bun run test:all}

  # E2Eテストを実行するサービス
  e2e:
    build:
      context: .
      dockerfile: docker/setup.Dockerfile
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    environment:
      # データベース設定
      - DATABASE_URL=${DATABASE_URL:-file:/app/database/data/dev.db}
      - DATABASE_AUTH_TOKEN=${DATABASE_AUTH_TOKEN:-}
      # URL設定（コンテナネットワーク内）
      - BACKEND_URL=${DOCKER_BACKEND_URL:-http://backend:${PORT:-3000}}
      - API_BASE_URL=${DOCKER_API_BASE_URL:-http://backend:${PORT:-3000}/api}
      - FRONTEND_URL=${DOCKER_FRONTEND_URL:-http://frontend:${PORT_FRONTEND:-5173}}
      # テスト設定
      - PORT=${PORT:-3000}
      - PORT_FRONTEND=${PORT_FRONTEND:-5173}
      - NODE_ENV=${NODE_ENV:-test}
      - PLAYWRIGHT_BROWSERS=${PLAYWRIGHT_BROWSERS:-chromium}
      - SKIP_BROWSER_DOWNLOAD=${SKIP_BROWSER_DOWNLOAD:-0}
      # SvelteKitのアダプター設定（テスト時）
      - ORIGIN=${ORIGIN:-http://frontend:${PORT_FRONTEND:-5173}}
    volumes:
      - db-data:/app/database/data
      - ./:/app
      - node_modules:/app/node_modules
      - frontend-node-modules:/app/frontend/node_modules
      - backend-node-modules:/app/backend/node_modules
      - database-node-modules:/app/database/node_modules
      - shared-node-modules:/app/shared/node_modules
      - e2e-results:/app/frontend/test-results
    networks:
      - app-network
    profiles:
      - ci
    command: ${E2E_CMD:-cd frontend && bunx playwright test}

volumes:
  db-data:
    driver: local
  node_modules:
  frontend-node-modules:
  backend-node-modules:
  database-node-modules:
  shared-node-modules:
  test-results:
  e2e-results:

networks:
  app-network:
    driver: bridge
